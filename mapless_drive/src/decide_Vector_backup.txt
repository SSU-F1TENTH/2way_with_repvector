#include <iostream>
#include <cmath>
#include <vector>

#include <utility>

// #include <fstream>
#include <rclcpp/rclcpp.hpp>
#include <ackermann_msgs/msg/ackermann_drive_stamped.hpp>
#include <sensor_msgs/msg/laser_scan.hpp>
#include <nav_msgs/msg/odometry.hpp>
#include <geometry_msgs/msg/quaternion.hpp>
#include <geometry_msgs/msg/point.hpp>
#include <visualization_msgs/msg/marker.hpp>
#include <tf2/LinearMath/Matrix3x3.h>
#include <tf2/LinearMath/Quaternion.h>

using namespace sensor_msgs::msg;
using namespace ackermann_msgs::msg;
using namespace nav_msgs::msg;
using namespace geometry_msgs::msg;
using namespace visualization_msgs::msg;
using namespace std;
using namespace std::chrono_literals;

using std::placeholders::_1;

struct Vector2D{
    double x;
    double y;

    // Vector2D(double x_, double y_) : x(x_), y(y_) {}
};

// std::ofstream debugging_os;

LaserScan::SharedPtr scan_data;
int max_gap_index = 0;
struct {
    double x;
    double y;
    double yaw;
} odom;

class VectorPublisher : public rclcpp::Node
{
    public:
        VectorPublisher()
        : Node("vector_publisher"){
            // debugging_os.open("/home/user/bag_ws/bgkim/test1.csv");
            drive_publisher_ = this ->create_publisher<AckermannDriveStamped>("/drive", 10);
            lidar_subscriber_ = this->create_subscription<LaserScan>("/scan", 10, std::bind(&VectorPublisher::lidar_callback, this, _1));
            // odom_subscriber_ = this->create_subscription<Odometry>("/ego_racecar/odom", 10, std::bind(&VectorPublisher::odom_callback, this, _1));
            vis_publisher_ftg = this->create_publisher<Marker>("/visualization_marker_ftg", 10);
            vis_publisher_obs = this->create_publisher<Marker>("/visualization_marker_obs", 10);
            vis_publisher_calc = this->create_publisher<Marker>("/visualization_marker_calc", 10);
        }
    // VectorPublisher::~VectorPublisher()
    // {
    //     debugging_os.close();
    // }
    private:
        void lidar_callback(const LaserScan::SharedPtr msg) const {
            scan_data = msg;

            int gap_size = 151; // dyg: gap_size hard coding?
            Vector2D A;
            Vector2D B;
            AckermannDriveStamped message;

            // 계수 조정 0 ~ 1 사이
            // A 가 k 배
            double k = 0.5;

            float range_min = msg->range_min;
            float range_max = msg->range_max;
            float angle_min = msg->angle_min;
            float angle_increment = msg->angle_increment;
            std::vector<float> ranges = msg->ranges;

            // std::pair<double,double> coordinate = findObsAvoidGoal(ranges, angle_increment, range_max, angle_min);
            auto vector_1 = get_vector(gap_size);
            display_gap(gap_size);
            auto vector_2 = findObsAvoidGoal(ranges, angle_increment, range_max, angle_min);
            
            display_gap_2(vector_2);
            // p.x = -vector_2.x * cos(vector_2.y) / 2;
            // p.y = vector_2.x * sin(vector_2.y) / 2;
            A.x = vector_1.x;
            A.y = vector_1.y;
            B.x = vector_2.x;
            B.y = vector_2.y;
            
            // 빔 수집하는거 바뀐뒤로 안되는거같은데
            // obs 피하는거 봤었는데
            //std::cout << "민혁(길이, radian) : " << A.x << " " << A.y << std::endl;
            //std::cout << "민(길이, radian) : " << B.x << " " << B.y << std::endl;

            // double speed = lenOfvector(A,B,k);
            //double speed = (1 - k) * A.x  + k * B.x;
            double steering_angle = radOfvector(A, B, k);
            //if(abs(steering_angle) > 0.5) {
                //if(steering_angle > 0){steering_angle = 0.5;}
                //else if(steering_angle < 0){steering_angle = (-0.5);}
                //else {steering_angle = 0;}
            //}

            double final_speed = speed_control(steering_angle, 5.5, 0.4);
            double final_acceleration = acceleration_control(steering_angle, 1.0);

            message.drive.speed = final_speed;
            message.drive.acceleration = final_acceleration;
            message.drive.steering_angle = steering_angle;
            // debugging_os <<  timestamp <<", " << steering_angle << '/n';
            std::cout << "speed: " << final_speed << "   acceleration: " << final_acceleration << "   steer_angle" << steering_angle << std::endl;
            message.drive.steering_angle_velocity = 0.05;
            drive_publisher_ -> publish(message);

        }
        double speed_control(double radian, double max_speed, double min_speed) const{
            double degree = to_degrees(radian);
            if(abs(degree) > 12){degree = 12;} //12 is the specific angle for maximum.
            double input_speed = max_speed - (max_speed - min_speed) * abs(degree) / (12);
            if (input_speed > max_speed) {return max_speed;}
            if (input_speed < min_speed) {return min_speed;}
            return input_speed;
        }
        double acceleration_control(double radian, double max_acceleration) const{
            double degree = to_degrees(radian);
            if(abs(degree) > 12){degree = 12;} //12 is the specific angle for maximum.
            double input_acceleration = max_acceleration - (max_acceleration - 0) * abs(degree) / (12);
            if (input_acceleration > max_acceleration) {return max_acceleration;}
            return input_acceleration;
        }

        double rads_to_follow(int last_index, int max_gap_index) const {
            double angle_increment = 0.004351851996034384; 
            int relative_point = max_gap_index - int(floor((last_index+1)/2)); 
            float rads = angle_increment*relative_point;

            return rads;
        }


        vector<float> trim_filter_ranges() const {
            auto ranges = scan_data->ranges;

            vector<float>::iterator it1 = ranges.begin();
            vector<float>::iterator it2 = ranges.begin()+149;
            ranges.erase(it1, it2);

            vector<float>::iterator it3 = ranges.end()-149;
            vector<float>::iterator it4 = ranges.end();
            ranges.erase(it3, it4);

            auto last_index = int(ranges.size()-1);
            float distance = 0;
            float max_distance = 12.5;

            for(int i = 0; i<=last_index; i++){
                distance = ranges.at(i);

                if(distance > max_distance)
                    ranges.at(i) = max_distance;
                else if(distance == INFINITY)
                    ranges.at(i) = max_distance;
                else
                    continue;
            }

            return ranges;
        }

        void display_gap(int gap_size) const {
            auto vector_1 = get_vector(gap_size);

            // float rads = rads_to_follow(last_index, max_gap_index);
            // float point_location = tan(rads) * 1;

            Marker marker;
            marker.header.frame_id = "ego_racecar/base_link";
            marker.header.stamp = now();
            marker.ns = "gaps";
            marker.id = 0;
            marker.type = Marker::POINTS;
            marker.action = Marker::ADD;
            marker.frame_locked = true;
            marker.scale.x = 0.2;
            marker.scale.y = 0.2;

            marker.color.r = 1.0f;
            marker.color.g = 0.0f;
            marker.color.b = 0.0f;
            marker.color.a = 1.0;

            Point p;
            p.x = vector_1.x * cos(vector_1.y) / 2;
            p.y = vector_1.x * sin(vector_1.y) / 2;
            p.z = 0.05;

            marker.pose.position = p;
            marker.points.push_back(p);
            // std::cout << "민혁 display 좌표: " << p.x << " " << p.y << std::endl;
            vis_publisher_ftg->publish(marker);
        }

        void display_gap_2(Vector2D vector_2) const {
            Marker marker1;
            marker1.header.frame_id = "ego_racecar/base_link";
            marker1.header.stamp = now();
            marker1.ns = "gaps_min";
            marker1.id = 0;
            marker1.type = Marker::POINTS;
            marker1.action = Marker::ADD;
            marker1.frame_locked = true;
            marker1.scale.x = 0.2;
            marker1.scale.y = 0.2;

            marker1.color.r = 0.0f;
            marker1.color.g = 1.0f;
            marker1.color.b = 0.0f;
            marker1.color.a = 3.0;

            Point p;
            p.x = -vector_2.x * cos(vector_2.y) / 2;
            p.y = vector_2.x * sin(vector_2.y) / 2;
            p.z = 0.05;

            marker1.pose.position = p;
            marker1.points.push_back(p);

            //std::cout << "민 : " << marker1.pose.position.x << " " << marker1.pose.position.y << std::endl;

            vis_publisher_obs->publish(marker1);
        }

        void display_gap_3(Vector2D vector_3) const {


            Marker marker;
            marker.header.frame_id = "ego_racecar/base_link";
            marker.header.stamp = now();
            marker.ns = "gaps_min";
            marker.id = 0;
            marker.type = Marker::POINTS;
            marker.action = Marker::ADD;
            marker.frame_locked = true;
            marker.scale.x = 0.2;
            marker.scale.y = 0.2;

            marker.color.r = 0.0f;
            marker.color.g = 0.0f;
            marker.color.b = 1.0f;
            marker.color.a = 3.0;

            Point p;
            p.x = vector_3.x * cos(vector_3.y)/2;
            p.y = vector_3.x * sin(vector_3.y)/2;
            p.z = 0.05;

            marker.pose.position = p;
            marker.points.push_back(p);

            //std::cout << "민 : " << marker1.pose.position.x << " " << marker1.pose.position.y << std::endl;

            vis_publisher_calc->publish(marker);
        }

        void follow_gap(int last_index, int max_gap_index) const {
            float rads = rads_to_follow(last_index, max_gap_index);

            if(abs(rads) > 0.698131701){
                rads = rads / abs(rads) * 0.698131701;
            }
        }
        Vector2D get_vector(int gap_size) const {
            auto ranges = trim_filter_ranges();
            double x = 0;   //initial of x
            double y = 0;   //initial of y
            Vector2D coordinate;

            auto last_index = int(ranges.size()-1);

            float max_gap = 0;
            

            for(int i = 0; i<=last_index-(gap_size-1); i++){
                float temp_sum = 0;
                for(int j = i; j<=i+(gap_size-1); j++){
                    temp_sum = temp_sum + ranges.at(j);
                }

                if(temp_sum > max_gap){
                    max_gap = temp_sum;
                    max_gap_index = i+int(floor(gap_size/2));
                }
                else
                    continue;
            }

            float rads = rads_to_follow(last_index, max_gap_index);
            if(abs(rads) > 0.698131701){
                rads = rads / abs(rads) * 0.698131701;
            }

            //change radian to degree.
            double angle = to_degrees(rads);

            //get range of the way point.
            double rads_to_index = rads;
            if(rads_to_index > 0){
                rads_to_index = scan_data->angle_max - rads_to_index;
            }
            int i = (rads_to_index - scan_data->angle_min) / (scan_data->angle_increment);
            double length = scan_data->ranges[i];

            if(angle>0) {
                x = - (length * sin(rads));
                y = length * cos(rads);
            }
            else if (angle<0) {
                x = length * sin(abs(rads));
                y = length * cos(abs(rads));
            }
            else {  //This is for 0 angle.
                y = length;
            }

            coordinate.x = sqrt(y*y + x*x);
            coordinate.y = rads;

            return coordinate;            
        }
// 병지        
        Vector2D weightedSum(const Vector2D& A, const Vector2D& B, double k) const{
            Vector2D result_vector;
            double result_x = (((1.0-k) * A.x) + ((k) * B.x));
            double result_y = (((1.0-k) * A.y) + ((k) * B.y));
            result_vector.x = result_x;
            result_vector.y = result_y;
            display_gap_3(result_vector);
            return result_vector;
        }

        double vectorAngle(const Vector2D& vector) const{
            return atan2(vector.y, vector.x);
        }

        double to_radians(double theta) const {
            return M_PI * theta / 180.0;
        }

        double to_degrees(float theta) const {
            return theta * 180.0 / M_PI;
        }

        double vectorLength(const Vector2D& vector) const{
            return sqrt(vector.x * vector.x + vector.y * vector.y);
        }

        double lenOfvector(const Vector2D& A, const Vector2D& B, double k) const {
            Vector2D result = weightedSum(A, B, k);
            double length = result.x;

            
            return length;
        }

        double radOfvector(const Vector2D& A, const Vector2D& B, double k) const{
            Vector2D result = weightedSum(A, B, k);
            double angle = result.y;

            return angle;
        }

        
        Vector2D findObsAvoidGoal (std::vector<float> ranges, float angle_increment, float range_max, float angle_min) const
        {
            
            double minimum_range = range_max;
            Vector2D xy_point_sum;
            double x_point_sum; 
            double y_point_sum; 
            // only radian calculate.
            double rad_x_sum;
            double rad_y_sum;

            int minimum_range_index = 0;
            int ranges_size = ranges.size();
            int gap_size = 10;
            int total_points_num = ranges_size / gap_size;

            //double x_arr[ranges_size] = { 0, }; 
            //double y_arr[ranges_size] = { 0, };

            for(int i = 0; i < ranges_size; i=i+gap_size){
                double cur_angle = (angle_min) + (i*(angle_increment));
                
                double rad_x = cos(cur_angle);
                double rad_y = sin(cur_angle);

                double cur_x_point = rad_x * ranges[i];
                double cur_y_point = rad_y * ranges[i];
                
                x_point_sum += cur_x_point;
                y_point_sum += cur_y_point;

                rad_x_sum = rad_x_sum + rad_x / (ranges[i]);
                rad_y_sum = rad_y_sum + rad_y / (ranges[i]);
            }

            rad_x_sum = rad_x_sum / total_points_num;
            rad_y_sum = rad_y_sum / total_points_num;
            x_point_sum = x_point_sum / total_points_num;
            y_point_sum = y_point_sum / total_points_num;

            //std::cout << "포인트 개수: " << total_points_num << std::endl;
            //std::cout << "x_sum: " << rad_x_sum << std::endl;
            //std::cout << "y_sum: " << rad_y_sum << std::endl;

            xy_point_sum.x = sqrt(x_point_sum * x_point_sum + y_point_sum * y_point_sum);
            xy_point_sum.y = atan2(-rad_y_sum, rad_x_sum);
    
            return xy_point_sum;
        }


        rclcpp::Publisher<AckermannDriveStamped>::SharedPtr drive_publisher_;
        rclcpp::Subscription<LaserScan>::SharedPtr lidar_subscriber_;
        rclcpp::Publisher<Marker>::SharedPtr vis_publisher_ftg;
        rclcpp::Publisher<Marker>::SharedPtr vis_publisher_obs;
        rclcpp::Publisher<Marker>::SharedPtr vis_publisher_calc;

};

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<VectorPublisher>());
    rclcpp::shutdown();
    return 0;
}

